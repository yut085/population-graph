{"version":3,"sources":["documents.js","theme.js","App.js","reportWebVitals.js","index.js"],"names":["documents","api","myApi","title","titleText","xLabel","text","yLabel","label","connectorAllowed","graphTitle","pref","prefName","pointInterval","pointStart","theme","buttonStyle","margin","display","graphStyle","textAlign","backgroundColor","fontSize","PopulationGraph","state","selected","Array","fill","prefectures","series","chagePrefectures","bind","fetch","headers","then","response","json","res","setState","result","index","selected_copy","this","slice","series_copy","i","length","name","splice","tmp","j","push","data","value","res_series","props","style","type","checked","prefCode","onChange","obj","options","xAxis","yAxis","plotOptions","Object","keys","map","renderButton","highcharts","Highcharts","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f30ef3b5.chunk.js","sourcesContent":["const documents = {\n  api: {\n    myApi: \"JCWV5aheW2CStnKItNg9TfmWHZXHibKAZZ86XJd2\"\n  },\n\n  title: {\n    titleText: \"\"\n  },\n\n  xLabel: {\n    title: {\n      text: \"年度\"\n    }\n  },\n\n  yLabel: {\n    title: {\n      text: \"人口数\"\n    }\n  },\n\n  label: {\n    connectorAllowed: false\n  },\n\n  text: {\n    graphTitle: \"都道府県別人口推移グラフ\"\n  },\n\n  pref: {\n    prefName: \"都道府県\"\n  },\n\n  pointInterval: 5,\n  pointStart: 1980\n};\n\nexport default documents;\n","const theme = {\n  buttonStyle: {\n    margin: \"5px\",\n    display: \"inline-block\"\n  },\n\n  graphStyle: {\n    textAlign: \"center\",\n    backgroundColor: \"#C0C0C0\",\n    fontSize: \"30px\"\n  }\n};\n\nexport default theme;\n","import React, { Component } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport documents from \"./documents\";\nimport theme from \"./theme\";\n\nclass PopulationGraph extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selected: Array(47).fill(false),\n      prefectures: {},\n      series: []\n    };\n    this.chagePrefectures = this.chagePrefectures.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://opendata.resas-portal.go.jp/api/v1/prefectures\", {\n      headers: { \"X-API-KEY\": documents.api.myApi }\n    })\n      .then(response => response.json())\n      .then(res => {\n        this.setState({ prefectures: res.result });\n      });\n  }\n\n  chagePrefectures(index) {\n    const selected_copy = this.state.selected.slice();\n    selected_copy[index] = !selected_copy[index];\n\n    if (!this.state.selected[index]) {\n      fetch(\n        `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=${index +\n          1}`,\n        {\n          headers: { \"X-API-KEY\": documents.api.myApi }\n        }\n      )\n        .then(response => response.json())\n        .then(res => {\n          let tmp = [];\n          for (let j = 0; j < 10; j++) {\n            tmp.push(res.result.data[0].data[j].value);\n          }\n          const res_series = {\n            name: this.state.prefectures[index].prefName,\n            data: tmp\n          };\n          this.setState({\n            selected: selected_copy,\n            series: [...this.state.series, res_series]\n          });\n        });\n    } else {\n      const series_copy = this.state.series.slice();\n      for (let i = 0; i < series_copy.length; i++) {\n        if (series_copy[i].name == this.state.prefectures[index].prefName) {\n          series_copy.splice(i, 1);\n        }\n      }\n      this.setState({\n        selected: selected_copy,\n        series: series_copy\n      });\n    }\n  }\n\n  renderButton(props) {\n    return (\n      <div key={props.prefCode} style={theme.buttonStyle}>\n        <input\n          type=\"checkbox\"\n          checked={this.state.selected[props.prefCode - 1]}\n          onChange={() => this.chagePrefectures(props.prefCode - 1)}\n        />\n        {props.prefName}\n      </div>\n    );\n  }\n\n  render() {\n    const obj = this.state.prefectures;\n    const options = {\n      title: {\n        text: documents.title.titleText\n      },\n      xAxis: {\n        title: {\n          text: documents.xLabel.title.text\n        }\n      },\n      yAxis: {\n        title: {\n          text: documents.yLabel.title.text\n        }\n      },\n      plotOptions: {\n        series: {\n          label: {\n            connectorAllowed: documents.label\n          },\n          pointInterval: documents.pointInterval,\n          pointStart: documents.pointStart\n        }\n      },\n      series: this.state.series\n    };\n    return (\n      <div>\n        <div style={theme.graphStyle}>{documents.text.graphTitle}</div>\n        <div>{documents.pref.prefName}</div>\n\n        {Object.keys(obj).map(i => this.renderButton(obj[i]))}\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </div>\n    );\n  }\n}\n\nexport default PopulationGraph;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PopulationGraph from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PopulationGraph />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}